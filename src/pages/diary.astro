---
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 示例即刻短文数据
const moments = [
	{
		id: 1,
		content: "测试日记：樱花下落速度的每秒五厘米!",
		date: "2025-01-15T10:30:00Z", // 如果要加Z的话，意味着会往前推8个小时（北京时区）
		images: ["/images/diary/1.sakura.jpg", "/images/diary/1.jpg"],
	},
	{
		id: 2,
		content: "答应我，不要去后悔已经发生的事情，永远不要，并且一定要做到，这是约定，一定要做到，一定不要内耗，这是约定!",
		date: "2025-08-31T14:30:00",
	},
	{
		id: 3,
		content: "我做到了昨天的约定，今天完成了：早起跑步、上午开始工作，晚上8点休息的时侯，写了博客也看了番，最重要的是，今天我的一天相对于昨天来说平静了很多，我会在今天安排好明天的计划，并且明天会完成",
		date: "2025-09-01T22:00:00",
	},
	{
		id: 4,
		content: "有进小一个月没有写博客了，简单总结一下前几天：忙着利用阿里云部署自己的astro博客，组织国庆新生赛并负责近一半的出题，还有偷偷摸鱼(小声)，从今天开始继续写日记，今天完成了Java的基础语法的复习，天气开始冷了，明天开始要早点起床喵",
		date: "2025-10-14T22:00:00",
		images: ["/images/diary/20251014.webp"],
	},
	{
		id: 5,
		content: "今天晚上要完成全部的已经布置的作业，明天开始恢复刷算法题和背单词，在水课要坚持看《计算机科学导论》，打算在这个周看完。",
		date: "2025-10-15T22:30:00",
	},
	{
		id: 6,
		content: "一场完全没有剑与魔法的旅行为何也能有如此美丽到落泪的情怀",
		date: "2025-10-20T23:09:00",
		images: ["/images/diary/202510201.webp", "/images/diary/202510202.webp"],
	},
	{
		id: 7,
		content: "今天看到了Anny与nuero和evil彻底切割，才意识到原来自己潜意识里面是在默认相信Anny和Vedal的故事会永远进行下去，但是现在才意识到一开始就是不可能的，写到这里，或许一开始就是Anny需要并不是一个情感寄托，而是心理咨询，童年的阴影、家人的安危、国家的战争、生活的压力、以及网络上的舆论和骚扰之类的，这些才是Anny停播如此之久的原因，而在这段时间，Anny恰好遇到了那个几乎完美无缺的英国男子，neuro和evil的生父，20多岁的Vedal，几乎完美的处理着neuro的开发计划和自己的生活，对外表现是一个无聊的冷淡的讲着冷笑话的形象，但是似乎又将网络和现实几乎完全剥离的一个神，在网络上一行都放在如何打造neuro的账号上，从来没有对自己形象的任何运营，从而个人角度来讲，这几乎完美符合我个人对于一名技术人员的所有预期（但是我如果创造一个neuro这样类似的造物，我大抵上很难保持如此的冷静和不被情绪左右），打开《单相思》单曲循环，忍不住继续写点，对于我自己，对于初恋、爱慕、暗恋之类的理解和看法都非常非常的淡薄，反而是这次隐约从2个v上看出来了，至于最后有什么想说的：希望现实中这2个人以后都一切开开心心的，或许这才应该是我们大部分人的初衷。",
		date: "2025-10-21T22:39:00",
		images: ["/images/diary/202510211.jpg", "/images/diary/202510212.jpg", "/images/diary/202510213.jpg"],
	},
	{
		id: 8,
		content: "今天寝室换床，书很多，比较忙吧，明天无论如何都要加油",
		date: "2025-10-23T23:36:00",
	},
];

// 时间格式化函数
function formatTime(dateString: string): string {
	const now = new Date();
	const date = new Date(dateString);
	const diffInMinutes = Math.floor(
		(now.getTime() - date.getTime()) / (1000 * 60),
	);

	if (diffInMinutes < 60) {
		return `${diffInMinutes}${i18n(I18nKey.diaryMinutesAgo)}`;
	}
	if (diffInMinutes < 1440) {
		// 24小时
		const hours = Math.floor(diffInMinutes / 60);
		return `${hours}${i18n(I18nKey.diaryHoursAgo)}`;
	}
	const days = Math.floor(diffInMinutes / 1440);
	return `${days}${i18n(I18nKey.diaryDaysAgo)}`;
}
---

<MainGridLayout title={i18n(I18nKey.diary)} description="即刻短文">
	<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
		<div class="card-base z-10 px-4 py-4 md:px-6 md:py-5 relative w-full">
			<div class="relative max-w-4xl">
				<!-- 页面头部 -->
				<div class="moments-header mb-6">
					<div class="header-content">
						<div class="header-info">
							<h1 class="moments-title text-xl md:text-2xl lg:text-3xl font-bold text-90 mb-1">{i18n(I18nKey.diary)}</h1>
							<p class="moments-subtitle text-sm md:text-base lg:text-lg text-75">{i18n(I18nKey.diarySubtitle)}</p>
						</div>
						<div class="header-stats">
							<div class="stat-item text-center">
								<span class="stat-number text-lg md:text-xl lg:text-2xl font-bold text-[var(--primary)]">{moments.length}</span>
								<span class="stat-label text-xs md:text-sm lg:text-base text-75">{i18n(I18nKey.diaryCount)}</span>
							</div>
						</div>
					</div>
				</div>

				<!-- 短文列表 -->
				<div class="moments-timeline">
					<div class="timeline-list space-y-4">
					{moments.map(moment => (
						<div class="moment-item card-base p-4 md:p-6 lg:p-8 hover:shadow-lg transition-all">
								<div class="moment-content">
									<p class="moment-text text-sm md:text-base lg:text-lg text-90 leading-relaxed mb-3 md:mb-4">{moment.content}</p>
									
									{moment.images && moment.images.length > 0 && (
				<div class="moment-images grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 md:gap-3 lg:gap-4 mb-3 md:mb-4">
					{moment.images.map((image, index) => (
					<div class="image-item relative rounded-md overflow-hidden aspect-square cursor-pointer hover:scale-105 transition-transform">
						<img 
							src={image} 
							alt={i18n(I18nKey.diaryImage)}
							class="w-full h-full object-cover"
							loading="lazy"
						/>
					</div>
					))}
				</div>
			)}
								</div>
								
								<hr class="moment-divider border-t border-[var(--line-divider)] my-3 md:my-4" />
								
								<div class="moment-footer flex justify-between items-center">
									<div class="moment-time flex items-center gap-1.5 text-75 text-xs md:text-sm lg:text-base">
										<i class="time-icon text-xs md:text-sm">🕐</i>
										<time datetime={moment.date}>
											{formatTime(moment.date)}
										</time>
									</div>
									
								</div>
							</div>
						))}
					</div>
				</div>

				<!-- 底部提示 -->
				<div class="moments-tips text-center mt-6 md:mt-8 lg:mt-10 text-75 text-xs md:text-sm lg:text-base italic">
					{i18n(I18nKey.diaryTips)}
				</div>
			</div>
		</div>
	</div>
</MainGridLayout>

<style>
	.card-base {
		background: var(--card-bg);
		border: 1px solid var(--line-divider);
		transition: all 0.3s ease;
	}
	
	.moments-header {
		padding: 1rem;
		border-radius: 8px;
		background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark, var(--primary)) 100%);
		color: white;
		position: relative;
		overflow: hidden;
	}
	
	.header-content {
		display: flex;
		justify-content: space-between;
		align-items: center;
		position: relative;
		z-index: 1;
	}
	
	.moments-title {
		color: white;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
	}
	
	.moments-subtitle {
		color: rgba(255, 255, 255, 0.9);
	}
	
	.stat-number {
		color: white;
	}
	
	.stat-label {
		color: rgba(255, 255, 255, 0.8);
	}
	
	.image-item img {
		transition: transform 0.3s ease;
	}
	
	.image-item:hover img {
		transform: scale(1.05);
	}
	
	.action-btn {
		background: none;
		border: none;
		cursor: pointer;
		color: var(--text-muted);
	}
	
	.action-btn:hover {
		color: var(--primary);
	}
	
	/* 响应式设计 */
	/* 手机端 (小于640px) */
	@media (max-width: 640px) {
		.moments-header {
			padding: 0.75rem;
		}
		
		.header-content {
			flex-direction: column;
			text-align: center;
			gap: 0.75rem;
		}
		
		.moment-images {
			grid-template-columns: repeat(2, 1fr);
		}
		
		.moment-footer {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.5rem;
		}
	}
	
	/* 平板竖屏 (641px - 900px) - 优化显示 */
	@media (min-width: 641px) and (max-width: 900px) {
		.moments-header {
			padding: 1.25rem;
		}
		
		.header-content {
			display: flex;
			justify-content: space-between;
			align-items: center;
		}
		
		.moment-item {
			padding: 1.5rem;
		}
		
		.moment-images {
			grid-template-columns: repeat(3, 1fr);
			gap: 0.75rem;
			max-width: 500px;
		}
		
		.moment-text {
			font-size: 1rem;
			line-height: 1.7;
		}
		
		.moment-footer {
			margin-top: 1rem;
		}
	}
	
	/* 平板横屏和桌面端 (大于900px) */
	@media (min-width: 901px) {
		.moments-header {
			padding: 1.5rem;
		}
		
		.moment-item {
			padding: 2rem;
		}
		
		.moment-images {
			grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
			max-width: 600px;
			gap: 1rem;
		}
		
		.moment-text {
			font-size: 1.1rem;
			line-height: 1.8;
		}
	}
	
	/* 优化小屏幕显示 */
	@media (max-width: 480px) {
		.card-base {
			margin: 0 -0.5rem;
		}
		
		.moment-item {
			border-radius: 8px;
		}
		
		.moments-header {
			border-radius: 6px;
		}
	}
</style>

